// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Voluntr.Infrastructure.Contexts;

#nullable disable

namespace Voluntr.Infrastructure.Migrations
{
    [DbContext(typeof(SqlContext))]
    [Migration("20241227223744_OnboardingTaskModel")]
    partial class OnboardingTaskModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Voluntr.Domain.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CauseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TaskCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CauseId");

                    b.ToTable("Achievement");

                    b.HasData(
                        new
                        {
                            Id = new Guid("611a87f3-636a-48bd-9119-a3426fb4c2a9"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 178, DateTimeKind.Unspecified).AddTicks(3209),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/arregacando-as-mangas.png",
                            Name = "Arregaçando as Mangas",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("e3aa6e07-c5df-41ab-942e-1a796aa5b291"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 178, DateTimeKind.Unspecified).AddTicks(3737),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/fazedor-de-impacto.png",
                            Name = "Fazedor de Impacto",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("e4f9bf02-0b0e-4150-ad22-27d198f2c3ec"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 178, DateTimeKind.Unspecified).AddTicks(3749),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/agente-da-mudanca.png",
                            Name = "Agente de Mudança",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("fbe22196-414d-43b5-89e7-99d236002f3d"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 178, DateTimeKind.Unspecified).AddTicks(3755),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/heroi-da-comunidade.png",
                            Name = "Heroi da Comunidade",
                            TaskCount = 50
                        },
                        new
                        {
                            Id = new Guid("baec2b42-aa84-4a76-9c39-c093e12909e9"),
                            CauseId = new Guid("62e8d003-efe8-4efa-9120-1e4d1af7b11e"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 178, DateTimeKind.Unspecified).AddTicks(6030),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/meio-ambiente/eco-guardiao.png",
                            Name = "Eco-Guardião",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("229569b6-4122-4d4d-ab19-aa5dedcb0d63"),
                            CauseId = new Guid("62e8d003-efe8-4efa-9120-1e4d1af7b11e"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9113),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/meio-ambiente/protetor-da-terra.png",
                            Name = "Protetor da Terra",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("f78839d2-a628-4ade-bac8-c0b0e209151a"),
                            CauseId = new Guid("62e8d003-efe8-4efa-9120-1e4d1af7b11e"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9195),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/meio-ambiente/herói-verde.png",
                            Name = "Herói Verde",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("c88177fa-fe60-42a7-9fa6-2b3db75a9efc"),
                            CauseId = new Guid("62e8d003-efe8-4efa-9120-1e4d1af7b11e"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9242),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/meio-ambiente/guardiao-ambiental.png",
                            Name = "Guardião Ambiental",
                            TaskCount = 50
                        },
                        new
                        {
                            Id = new Guid("8f5979fc-1a25-4534-8585-e20a20732149"),
                            CauseId = new Guid("a83892a8-5b80-4d07-af0a-158353a44aae"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9254),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/educacao/tutor-comunitário.png",
                            Name = "Tutor Comunitário",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("3c124b73-52fc-4b1d-90a4-5ec7950b53d9"),
                            CauseId = new Guid("a83892a8-5b80-4d07-af0a-158353a44aae"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9263),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/educacao/protetor-do-conhecimento.png",
                            Name = "Protetor do Conhecimento",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("5916cb2b-85ed-4e6f-94fe-0f8c69ad525c"),
                            CauseId = new Guid("a83892a8-5b80-4d07-af0a-158353a44aae"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9270),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/educacao/herói-do-futuro.png",
                            Name = "Herói do Futuro",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("77d35499-67d6-4534-8683-97141c025a74"),
                            CauseId = new Guid("a83892a8-5b80-4d07-af0a-158353a44aae"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9281),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/educacao/guardiao-da-transformacao.png",
                            Name = "Guardião da Transformação",
                            TaskCount = 50
                        },
                        new
                        {
                            Id = new Guid("31ce27d3-211f-4f5a-990e-7af7ab39d584"),
                            CauseId = new Guid("766fd9db-60f5-4784-b9ed-1880f2d2a7fd"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9341),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/protecao-dos-animais/anjo-dos-animais.png",
                            Name = "Anjo dos Animais",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("b2dfb3c6-1d41-41c0-8efe-f31204861b83"),
                            CauseId = new Guid("766fd9db-60f5-4784-b9ed-1880f2d2a7fd"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9347),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/protecao-dos-animais/protetor-da-fauna.png",
                            Name = "Protetor da Fauna",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("02fa8032-9fe0-415a-a9af-252e1ca1cfe3"),
                            CauseId = new Guid("766fd9db-60f5-4784-b9ed-1880f2d2a7fd"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9359),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/protecao-dos-animais/herói-das-patas.png",
                            Name = "Herói das Patas",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("c0c8e1bf-d69e-4730-8f10-128d6a984c10"),
                            CauseId = new Guid("766fd9db-60f5-4784-b9ed-1880f2d2a7fd"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9366),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/protecao-dos-animais/guardiao-dos-animais.png",
                            Name = "Guardião dos Animais",
                            TaskCount = 50
                        },
                        new
                        {
                            Id = new Guid("c25a6cd8-dbd9-414b-8e20-6c197eb80655"),
                            CauseId = new Guid("5b8c76b7-c4c2-490d-813c-36a4c17cdf48"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9374),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/saude/anjo-da-vida.png",
                            Name = "Anjo da Vida",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("cd7c6c56-aa4b-4799-b5f6-f254310d1cce"),
                            CauseId = new Guid("5b8c76b7-c4c2-490d-813c-36a4c17cdf48"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9380),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/saude/protetor-da-saúde.png",
                            Name = "Protetor da Saúde",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("4207eb00-ec19-4ead-81ab-9a014d0cc456"),
                            CauseId = new Guid("5b8c76b7-c4c2-490d-813c-36a4c17cdf48"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9392),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/saude/herói-da-esperanca.png",
                            Name = "Herói da Esperança",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("6919fef9-cf6d-4da2-a588-e4df2bb4b137"),
                            CauseId = new Guid("5b8c76b7-c4c2-490d-813c-36a4c17cdf48"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9399),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/saude/guardiao-da-vida.png",
                            Name = "Guardião da Vida",
                            TaskCount = 50
                        },
                        new
                        {
                            Id = new Guid("4b25eec8-8abf-473f-af4e-32e988c720c7"),
                            CauseId = new Guid("af2243ec-6b50-468b-ab22-bd4850f377ce"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9410),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/esporte/atleta-solidário.png",
                            Name = "Atleta Solidário",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("512038a6-4465-4eee-a5dd-88e8219fc8b9"),
                            CauseId = new Guid("af2243ec-6b50-468b-ab22-bd4850f377ce"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9421),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/esporte/protetor-esportivo.png",
                            Name = "Protetor Esportivo",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("40128d60-6425-4435-ac7c-9adf6e041c48"),
                            CauseId = new Guid("af2243ec-6b50-468b-ab22-bd4850f377ce"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9427),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/esporte/herói-do-movimento.png",
                            Name = "Herói do Movimento",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("8265ce18-f6e7-4384-8978-67f68ab0a734"),
                            CauseId = new Guid("af2243ec-6b50-468b-ab22-bd4850f377ce"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9434),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/esporte/guardiao-das-medalhas.png",
                            Name = "Guardião das Medalhas",
                            TaskCount = 50
                        },
                        new
                        {
                            Id = new Guid("4dc779c4-40fb-463d-82d6-89bd81f9ac7a"),
                            CauseId = new Guid("a86871b2-93d9-4af8-a720-aa3ed2d94482"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9447),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/doacao-de-alimento/provedor-de-esperanca.png",
                            Name = "Provedor de Esperança",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("a29806bc-bc14-415f-abf7-94d8cf004f5c"),
                            CauseId = new Guid("a86871b2-93d9-4af8-a720-aa3ed2d94482"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9454),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/doacao-de-alimento/protetor-da-esperanca.png",
                            Name = "Protetor da Esperança",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("066b0e61-e4ac-479b-869b-106d4a655e52"),
                            CauseId = new Guid("a86871b2-93d9-4af8-a720-aa3ed2d94482"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9459),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/doacao-de-alimento/herói-da-nutricao.png",
                            Name = "Herói da Nutrição",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("c7c009c2-6a7c-4d21-bcee-2680766faa11"),
                            CauseId = new Guid("a86871b2-93d9-4af8-a720-aa3ed2d94482"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9498),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/doacao-de-alimento/guardiao-da-fome-zero.png",
                            Name = "Guardião da Fome Zero",
                            TaskCount = 50
                        },
                        new
                        {
                            Id = new Guid("04e0445a-1615-4c93-be71-20b7c31e41be"),
                            CauseId = new Guid("70c14ca9-14eb-4153-86f0-00eb23c0894c"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9506),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/sem-teto/amigo-de-rua.png",
                            Name = "Amigo de Rua",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("42eb11b6-a1f3-4f82-adcf-c7b1864a4f30"),
                            CauseId = new Guid("70c14ca9-14eb-4153-86f0-00eb23c0894c"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9512),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/sem-teto/protetor-da-esperanca.png",
                            Name = "Protetor da Esperança",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("11ad6b49-1119-4e53-b334-caa5e1f07242"),
                            CauseId = new Guid("70c14ca9-14eb-4153-86f0-00eb23c0894c"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9519),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/sem-teto/herói-solidário.png",
                            Name = "Herói Solidário",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("fa3ca751-565b-4f64-bbc4-e0e754e3784d"),
                            CauseId = new Guid("70c14ca9-14eb-4153-86f0-00eb23c0894c"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9530),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/sem-teto/guardiao-da-dignidade.png",
                            Name = "Guardião da Dignidade",
                            TaskCount = 50
                        },
                        new
                        {
                            Id = new Guid("59e21e30-fed3-4288-974e-b50b33e358c8"),
                            CauseId = new Guid("a2f10edd-7759-4f2c-a15c-a00838b7de44"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9538),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/moradia/construtor-solidário.png",
                            Name = "Construtor Solidário",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("b1c1e6e6-0c11-4aa5-a6b4-998cb8d8b912"),
                            CauseId = new Guid("a2f10edd-7759-4f2c-a15c-a00838b7de44"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9545),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/moradia/protetor-dos-lares.png",
                            Name = "Protetor dos Lares",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("fbcf6eeb-d720-44c3-a80b-28c51b5fc459"),
                            CauseId = new Guid("a2f10edd-7759-4f2c-a15c-a00838b7de44"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9558),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/moradia/herói-da-moradia.png",
                            Name = "Herói da Moradia",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("32dc4636-a2ca-47ec-8dcf-5f08eb5d5c4b"),
                            CauseId = new Guid("a2f10edd-7759-4f2c-a15c-a00838b7de44"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9564),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/moradia/guardiao-dos-lares.png",
                            Name = "Guardião dos Lares",
                            TaskCount = 50
                        },
                        new
                        {
                            Id = new Guid("c9c72b03-0f1f-4d86-8123-23ed23fa8b8f"),
                            CauseId = new Guid("07d92b4c-bedc-4dec-84ec-6f23eb2a6f82"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9571),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/cultura/curador-comunitário.png",
                            Name = "Curador Comunitário",
                            TaskCount = 5
                        },
                        new
                        {
                            Id = new Guid("28efa1af-25b6-4ac5-8ed0-82e685aebefe"),
                            CauseId = new Guid("07d92b4c-bedc-4dec-84ec-6f23eb2a6f82"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9577),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/cultura/protetor-da-tradicao.png",
                            Name = "Protetor da Tradição",
                            TaskCount = 10
                        },
                        new
                        {
                            Id = new Guid("2523fc9a-cd9e-45d6-9f59-bdaea2dfe749"),
                            CauseId = new Guid("07d92b4c-bedc-4dec-84ec-6f23eb2a6f82"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9585),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/cultura/herói-cultural.png",
                            Name = "Herói Cultural",
                            TaskCount = 20
                        },
                        new
                        {
                            Id = new Guid("3f0352c8-b584-4438-85de-b1429e7f1419"),
                            CauseId = new Guid("07d92b4c-bedc-4dec-84ec-6f23eb2a6f82"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 179, DateTimeKind.Unspecified).AddTicks(9591),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/cultura/guardiao-das-artes.png",
                            Name = "Guardião das Artes",
                            TaskCount = 50
                        });
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Neighbourhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Cause", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cause");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62e8d003-efe8-4efa-9120-1e4d1af7b11e"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 177, DateTimeKind.Unspecified).AddTicks(5839),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/meio-ambiente/meio-ambiente.png",
                            Name = "Meio ambiente"
                        },
                        new
                        {
                            Id = new Guid("a83892a8-5b80-4d07-af0a-158353a44aae"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 177, DateTimeKind.Unspecified).AddTicks(7700),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/educacao/educacao.png",
                            Name = "Educação"
                        },
                        new
                        {
                            Id = new Guid("766fd9db-60f5-4784-b9ed-1880f2d2a7fd"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 177, DateTimeKind.Unspecified).AddTicks(7731),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/protecao-dos-animais/protecao-dos-animais.png",
                            Name = "Proteção dos animais"
                        },
                        new
                        {
                            Id = new Guid("5b8c76b7-c4c2-490d-813c-36a4c17cdf48"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 177, DateTimeKind.Unspecified).AddTicks(7743),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/saude/saude.png",
                            Name = "Saúde"
                        },
                        new
                        {
                            Id = new Guid("af2243ec-6b50-468b-ab22-bd4850f377ce"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 177, DateTimeKind.Unspecified).AddTicks(7795),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/esporte/esporte.png",
                            Name = "Esporte"
                        },
                        new
                        {
                            Id = new Guid("a86871b2-93d9-4af8-a720-aa3ed2d94482"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 177, DateTimeKind.Unspecified).AddTicks(7801),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/doacao-de-alimento/doacao-de-alimento.png",
                            Name = "Doação"
                        },
                        new
                        {
                            Id = new Guid("70c14ca9-14eb-4153-86f0-00eb23c0894c"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 177, DateTimeKind.Unspecified).AddTicks(7806),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/sem-teto/sem-teto.png",
                            Name = "Apoio aos sem-teto"
                        },
                        new
                        {
                            Id = new Guid("a2f10edd-7759-4f2c-a15c-a00838b7de44"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 177, DateTimeKind.Unspecified).AddTicks(7822),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/moradia/moradia.png",
                            Name = "Moradia"
                        },
                        new
                        {
                            Id = new Guid("07d92b4c-bedc-4dec-84ec-6f23eb2a6f82"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 177, DateTimeKind.Unspecified).AddTicks(7826),
                            ImageUrl = "https://voluntrprodeastusst.blob.core.windows.net/images/achievements/cultura/cultura.png",
                            Name = "Cultura"
                        });
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemplateId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Ngo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Ngo");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.OAuthProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailProperty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailVerifiedProperty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameProperty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureProperty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserInfoApiUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OAuthProvider");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.OnboardingTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Redirect")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OnboardingTask");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8aab748-c5df-4297-83d2-b51fc0b5cdf9"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 180, DateTimeKind.Unspecified).AddTicks(1916),
                            Description = "Adicione uma foto à sua conta para que ONGs e outros voluntários o reconheçam.",
                            Image = "https://voluntrprodeastusst.blob.core.windows.net/images/onboarding/photo.png",
                            Name = "Apresente-se à comunidade",
                            Redirect = "/profile",
                            Type = "Foto"
                        },
                        new
                        {
                            Id = new Guid("f78b7cc4-8e4a-4e71-a8b7-cd042a2d599c"),
                            CreatedAt = new DateTime(2024, 12, 27, 19, 37, 44, 180, DateTimeKind.Unspecified).AddTicks(4801),
                            Description = "Escolha causas que te inspiram. Assim, você verá missões que combinam com seus interesses.",
                            Image = "https://voluntrprodeastusst.blob.core.windows.net/images/onboarding/cause.png",
                            Name = "Hora do match",
                            Redirect = "/profile",
                            Type = "Causa"
                        });
                });

            modelBuilder.Entity("Voluntr.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OAuthProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Paused")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OAuthProviderId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.UserAchievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievement");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.UserCause", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CauseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCause");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Volunteer");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Achievement", b =>
                {
                    b.HasOne("Voluntr.Domain.Models.Cause", "Cause")
                        .WithMany("Achievements")
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cause");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Address", b =>
                {
                    b.HasOne("Voluntr.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Company", b =>
                {
                    b.HasOne("Voluntr.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Ngo", b =>
                {
                    b.HasOne("Voluntr.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Notification", b =>
                {
                    b.HasOne("Voluntr.Domain.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.User", b =>
                {
                    b.HasOne("Voluntr.Domain.Models.OAuthProvider", "OAuthProvider")
                        .WithMany()
                        .HasForeignKey("OAuthProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OAuthProvider");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.UserAchievement", b =>
                {
                    b.HasOne("Voluntr.Domain.Models.Achievement", "Achievement")
                        .WithMany()
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voluntr.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.UserCause", b =>
                {
                    b.HasOne("Voluntr.Domain.Models.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voluntr.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Volunteer", b =>
                {
                    b.HasOne("Voluntr.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.Cause", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("Voluntr.Domain.Models.User", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
